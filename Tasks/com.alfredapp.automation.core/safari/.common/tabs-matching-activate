#!/usr/bin/osascript -l JavaScript

function alfredArgs(args) {
  return JSON.stringify({ alfredworkflow: { arg: args } })
}

function frontmostBrowserName() {
  const getBrowser = $("~/Library/Application Support/Alfred/Automation/Tasks/com.alfredapp.automation.core/safari/.common/get-frontmost-browser").stringByExpandingTildeInPath.js

  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath("/usr/bin/env")
  task.arguments = [getBrowser]
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  if (task.terminationStatus !== 0) throw "Did not find a supported web browser"
  return stringOut.trim()
}

function browserVariant(appName) {
  const webkitVariants = ["Safari", "Webkit", "Orion"]
  const chromiumVariants = ["Google Chrome", "Chromium", "Opera", "Vivaldi", "Brave Browser", "Microsoft Edge"]

  if (webkitVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "webkit" }
  if (chromiumVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "chromium" }
  throw `${appName} is not a supported browser: ${webkitVariants.concat(chromiumVariants).join(", ")}`
}

function lookFor(matchString, inText, useRegex) {
  if (useRegex) return RegExp(matchString).test(inText)
  return inText.includes(matchString)
}

function run(argv) {
  const browser = argv[0] === "frontmost_browser" ?
    browserVariant(frontmostBrowserName()) :
    browserVariant(argv[0])

  const allWindows = browser.app.windows

  if (allWindows.length === 0) {
    console.log("No windows found.")
    return
  }

  const windows = argv[1] === "1" ? allWindows() : [allWindows[0]]
  const matchString = argv[2]
  const firstLast = argv[3]
  const regex = argv[4] === "1"

  const orderedWindows = firstLast === "first" ? windows : windows.slice().reverse()

  for (const window of orderedWindows) {
    if (browser.variant === "webkit") {
      // Grab wanted tab
      const matchingTabs = window
        .tabs()
        ?.filter(tab => lookFor(matchString, tab.url(), regex))

      if (matchingTabs === undefined || matchingTabs.length === 0) continue // Skip if no matches

      // Swith to tab
      const wantedTab = firstLast === "first" ? matchingTabs.at(0) : matchingTabs.at(-1)
      window.currentTab = wantedTab

      // Raise window with tab
      const windowIndex = window.index() - 1

      Application("System Events")
        .processes[browser.app.name()]
        .windows()[windowIndex]
        .actions["AXRaise"]
        .perform()

      // Bring browser to front
      browser.app.activate()

      // Output URL
      return alfredArgs(wantedTab.url())
    } else if (browser.variant === "chromium") {
      // Grab wanted tab
      const matchingTabs = window
        .tabs()
        ?.map((tab, index) => [tab.url(), index])
        ?.filter(tab => lookFor(matchString, tab[0], regex))

      if (matchingTabs === undefined || matchingTabs.length === 0) continue // Skip if no matches

      // Swith to tab
      const wantedTab = firstLast === "first" ? matchingTabs.at(0) : matchingTabs.at(-1)
      const wantedTabURL = wantedTab[0]
      const wantedTabIndex = wantedTab[1]
      window.activeTabIndex = wantedTabIndex + 1

      // Raise window with tab
      const windowId = window.id()
      const windowIndex = windows.findIndex(window => window.id() === windowId)

      Application("System Events")
        .processes[browser.app.name()]
        .windows()[windowIndex]
        .actions["AXRaise"]
        .perform()

      // Bring browser to front
      browser.app.activate()

      // Output URL
      return alfredArgs(wantedTabURL)
    }
  }

  // No tab matched
  return alfredArgs([])
}
