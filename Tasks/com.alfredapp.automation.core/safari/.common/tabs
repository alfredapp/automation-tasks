#!/usr/bin/osascript -l JavaScript

function alfredArgs(args) {
  return JSON.stringify({ alfredworkflow: { arg: args } })
}

function frontmostBrowserName() {
  const getBrowser = $("~/Library/Application Support/Alfred/Automation/Tasks/com.alfredapp.automation.core/safari/.common/get-frontmost-browser").stringByExpandingTildeInPath.js

  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath("/usr/bin/env")
  task.arguments = [getBrowser]
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  if (task.terminationStatus !== 0) throw "Did not find a supported web browser"
  return stringOut.trim()
}

function browserVariant(appName) {
  const webkitVariants = ["Safari", "Webkit", "Orion"]
  const chromiumVariants = ["Google Chrome", "Chromium", "Opera", "Vivaldi", "Brave Browser", "Microsoft Edge"]

  if (webkitVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "webkit" }
  if (chromiumVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "chromium" }
  throw new Error(`${appName} is not a supported browser: ${webkitVariants.concat(chromiumVariants).join(", ")}`)
}

function run(argv) {
  const browser = argv[0] === "frontmost_browser" ?
    browserVariant(frontmostBrowserName()) :
    browserVariant(argv[0])
  const windows = argv[1] === "1" ? browser.app.windows() : [browser.app.windows()[0]]
  const outFormat = argv[2]

  const tabs = windows
    .flatMap(window => window.tabs())
    .filter(tab => tab !== null)
    .map(tab => [tab.url(), tab.name()])

  switch (outFormat) {
    case "url": return alfredArgs(tabs.map(tab => tab[0]))
    case "title": return alfredArgs(tabs.map(tab => tab[1]))
    case "url_tab_title": return alfredArgs(tabs.map(tab => tab[0] + "\t" + tab[1]))
    case "title_tab_url": return alfredArgs(tabs.map(tab => tab[1] + "\t" + tab[0]))
    case "url_title": return alfredArgs(tabs.map(tab => tab[0] + "|" + tab[1]))
    default: throw "Unrecognised type: " + outFormat
  }
}
