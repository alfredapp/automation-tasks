#!/usr/bin/osascript -l JavaScript

function alfredArgs(args) {
  return JSON.stringify({ alfredworkflow: { arg: args } })
}

function frontmostBrowserName() {
  const getBrowser = $("~/Library/Application Support/Alfred/Automation/Tasks/com.alfredapp.automation.core/safari/.common/get-frontmost-browser").stringByExpandingTildeInPath.js

  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath("/usr/bin/env")
  task.arguments = [getBrowser]
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  if (task.terminationStatus !== 0) throw "Did not find a supported web browser"
  return stringOut.trim()
}

function browserVariant(appName) {
  const webkitVariants = ["Safari", "Webkit", "Orion"]
  const chromiumVariants = ["Google Chrome", "Chromium", "Opera", "Vivaldi", "Brave Browser", "Microsoft Edge"]

  if (webkitVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "webkit" }
  if (chromiumVariants.some(browserName => appName.startsWith(browserName))) return { app: Application(appName), variant: "chromium" }
  throw `${appName} is not a supported browser: ${webkitVariants.concat(chromiumVariants).join(", ")}`
}

function lookFor(matchString, inText, useRegex) {
  if (useRegex) return RegExp(matchString).test(inText)
  return inText.includes(matchString)
}

function run(argv) {
  const browser = argv[0] === "frontmost_browser" ?
    browserVariant(frontmostBrowserName()) :
    browserVariant(argv[0])

  const allWindows = browser.app.windows

  if (allWindows.length === 0) {
    console.log("No windows found.")
    return
  }

  const windows = argv[1] === "1" ? allWindows() : [allWindows[0]]
  const matchString = argv[2]
  const regex = argv[3] === "1"

  const matchingTabs = windows
    .flatMap(window => window.tabs())
    .filter(tab => tab !== null)
    .filter(tab => !lookFor(matchString, tab.url(), regex))

  const tabURLs = matchingTabs.map(tab => tab.url())

  // Close in reverse order, otherwise closing tabs may mess with tab indexes
  matchingTabs.slice().reverse().forEach(tab => tab.close())
  return alfredArgs(tabURLs)
}
