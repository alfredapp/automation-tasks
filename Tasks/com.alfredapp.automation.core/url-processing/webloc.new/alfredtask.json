{
  "configurableConfig" : [
    {
      "config" : {
        "default" : "",
        "placeholder" : "The passed-in arguments will be used",
        "required" : false,
        "trim" : true
      },
      "description" : "",
      "label" : "URL",
      "type" : "textfield",
      "variable" : "url"
    },
    {
      "config" : {
        "default" : "~\/Desktop",
        "filtermode" : 1,
        "placeholder" : "",
        "required" : false
      },
      "description" : "",
      "label" : "Save Folder",
      "type" : "filepicker",
      "variable" : "save_in"
    },
    {
      "config" : {
        "default" : false,
        "required" : false,
        "text" : "Replace file with same name at destination"
      },
      "description" : "",
      "label" : "Overwrite",
      "type" : "checkbox",
      "variable" : "overwrite"
    },
    {
      "config" : {
        "default" : true,
        "required" : false,
        "text" : "Shorten file name by removing web path"
      },
      "description" : "When enabled, \"https:\/\/example.com\/some\/path\" becomes \"example.com.webloc\".\nWhen disabled, it becomes \"example.com_some_path.webloc\".",
      "label" : "Hostname Only",
      "type" : "checkbox",
      "variable" : "hostname_only"
    }
  ],
  "inputMulti" : 2,
  "inputOverride" : "url",
  "inputType" : 2,
  "outputDescription" : "File path",
  "outputType" : 1,
  "script" : "function envVar(varName) {\n  return $.NSProcessInfo\n    .processInfo\n    .environment\n    .objectForKey(varName).js\n}\n\nfunction alfredArgs(args) {\n  return JSON.stringify({ alfredworkflow: { arg: args } })\n}\n\nfunction writeFile(path, text) {\n  $(text).writeToFileAtomicallyEncodingError(path, true, $.NSUTF8StringEncoding, undefined)\n}\n\nfunction run(argv) {\n  const hostnameOnly = envVar(\"hostname_only\") === \"1\"\n  const overwrite = envVar(\"overwrite\") === \"1\"\n  const saveIn = envVar(\"save_in\")\n  const fileManager = $.NSFileManager.defaultManager\n\n  \/\/ Create destination directory\n  fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(saveIn, true, undefined, undefined)\n\n  \/\/ Build files\n  const webFiles = argv.map(url => {\n    const urlObject = $.NSURL.URLWithString(url)\n    const urlHost = urlObject.host.js\n    const urlPath = urlObject.path.js\n      .replace(\/\\\/$\/, \"\") \/\/ Remove trailing \"\/\"\n      .replace(\/[^\\w]\/g, \"_\") \/\/ Replace non-word characters with \"_\"\n\n    const file = (hostnameOnly || urlPath === \"\") ?\n      `${saveIn}\/${urlHost}.webloc` :\n      `${saveIn}\/${urlHost}${urlPath}.webloc`\n\n    if (!overwrite && fileManager.fileExistsAtPath(file)) throw `File exists: ${file}`\n\n    const weblocContents = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict><key>URL<\/key><string>${url}<\/string><\/dict><\/plist>`\n\n    writeFile(file, weblocContents)\n    return file\n  })\n\n  return alfredArgs(webFiles)\n}",
  "scriptType" : 7,
  "state" : 0,
  "taskDescription" : "Make .webloc files from URLs",
  "taskName" : "New Web Shortcut"
}