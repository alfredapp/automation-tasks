{
  "configurableConfig" : [
    {
      "config" : {
        "default" : "",
        "required" : false,
        "trim" : true,
        "verticalsize" : 6
      },
      "description" : "Newline-separated list of app names, paths, or bundle identifiers. Add apps to the list on-demand by passing them as arguments: take advantage of the \"Arg and Vars\" and \"Split Arg\" Utilities.",
      "label" : "Open",
      "type" : "textarea",
      "variable" : "app_list"
    },
    {
      "config" : {
        "default" : false,
        "required" : false,
        "text" : "Do not bring apps to front"
      },
      "description" : "",
      "label" : "Background",
      "type" : "checkbox",
      "variable" : "in_background"
    }
  ],
  "inputDescription" : "Optional app names, paths, or bundle identifiers",
  "inputMulti" : -1,
  "inputType" : 0,
  "outputType" : 0,
  "script" : "function envVar(varName) {\n  return $.NSProcessInfo\n    .processInfo\n    .environment\n    .objectForKey(varName).js\n}\n\nfunction openApp(app, toForeground) {\n  \/\/ \"activate\" does not restore minimised windows, but \"launch\" does\n  app.launch() \/\/ Open app in background\n  if (toForeground) app.activate() \/\/ Bring to front if applicable\n}\n\nfunction run(argv) {\n  const fromVar = envVar(\"app_list\")\n    .split(\"\\n\")\n    .flatMap(line => line.split(\",\")) \/\/ Continue to support comma-separation\n    .map(app => app.trim())\n    .filter(app => app.length > 0)\n\n  const toForeground = envVar(\"in_background\") === \"0\"\n  const apps = argv.concat(fromVar)\n\n  apps.forEach(app => {\n    try { openApp(Application(app), toForeground) }\n    catch (ignore) { }\n  })\n}",
  "scriptType" : 7,
  "state" : 0,
  "taskDescription" : "Quit passed-in and configured apps",
  "taskName" : "Open Apps"
}