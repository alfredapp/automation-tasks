#!/usr/bin/osascript -l JavaScript

const fileManager = $.NSFileManager.defaultManager

function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

function alfredArgs(args) {
  return JSON.stringify({ alfredworkflow: { arg: args } })
}

function isDir(path) {
  const ref = Ref()
  fileManager.fileExistsAtPathIsDirectory(path, ref)
  return ref[0]
}

function pathToFinderItem(path) {
  // Writability check
  if (!fileManager.isWritableFileAtPath(path)) throw "Cannot write to path: " + path

  // Split path components
  const dirComponents = $(path).stringByDeletingLastPathComponent.js.split("/").slice(1)
  const baseComponent = $(path).lastPathComponent.js

  // Join as Finder item
  const finderDirpath = dirComponents.reduce(
    (container, dir) => container.folders[dir],
    Application("Finder").startupDisk()
  )

  return isDir(path) ?
    finderDirpath.folders[baseComponent] :
    finderDirpath.files[baseComponent]
}

function run(argv) {
  const mode = argv[0]
  const finderComment = argv[1]
  const recursive = argv[2] === "1"
  const initPaths = argv.slice(3)

  const allPaths = initPaths.flatMap(path => {
    const finderPath = pathToFinderItem(path)
    if (recursive && isDir(path)) return [finderPath, finderPath.entireContents()].flat()
    return finderPath
  })

  switch (mode) {
    case "read": return alfredArgs(allPaths.map(p => p.comment()))
    case "set": return allPaths.forEach(p => p.comment = finderComment)
    case "clear": return allPaths.forEach(p => p.comment = "")
    default: throw "Unrecognised mode: " + mode
  }
}
